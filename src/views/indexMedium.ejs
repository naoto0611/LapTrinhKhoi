<!DOCTYPE html>
<html>

<head>
    <title>Kids Code Academy</title>
    <link rel="stylesheet" href="/css/index.css" type="text/css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <script src="javascript_compressed.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://unpkg.com/blockly"></script>
    <script src="https://unpkg.com/blockly/python_compressed"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>

</head>

<body>
    <div class="container-fluid d-flex flex-row" id="block-page">
        <div class="col-sm-12 col-md-5">
            <div class="container-fluid d-flex flex-column justify-content-end">
                <div class="container-fluid mb-5" id="question-container">
                    <textarea class="p-2" id="question-area">
<% for(let i=0;i<mediumQuestionsData.length;i++){%>
<%=i+1%>. <%=mediumQuestionsData[i].ex_question%>
                ------------------------------------------
<%}%>
                    </textarea>
                </div>
                <div class="col-sm-12 container-fluid d-flex" id="question-button-1">
                    <input type="text" placeholder="1" name="answer" class="answer" required />
                    <input type="text" placeholder="2" name="answer" class="answer" required />
                    <input type="text" placeholder="3" name="answer" class="answer" required />
                    <input type="text" placeholder="4" name="answer" class="answer" required />
                    <input type="text" placeholder="5" name="answer" class="answer" required />
                    <input type="text" placeholder="6" name="answer" class="answer" required />
                    <input type="text" placeholder="7" name="answer" class="answer" required />
                    <input type="text" placeholder="8" name="answer" class="answer" required />
                </div>
                <div class="col-sm-12 mt-2 container-fluid d-flex" id="question-button-2">
                    <input type="text" placeholder="9" name="answer" class="answer" required />
                    <input type="text" placeholder="10" name="answer" class="answer" required />
                    <input type="text" placeholder="11" name="answer" class="answer" required />
                    <input type="text" placeholder="12" name="answer" class="answer" required />
                    <input type="text" placeholder="13" name="answer" class="answer" required />
                    <input type="text" placeholder="14" name="answer" class="answer" required />
                    <input type="text" placeholder="15" name="answer" class="answer" required />
                </div>
                <div class="col-sm-12 mt-2 container-fluid d-flex" id="question-button">
                    <button type="submit" class="px-3 rounded" id="submit-answer" >Submit</button>
                </div>
                <div class="col-sm-12 container-fluid my-3 d-flex" id="option-button">
                    <button id="run-button" class="mx-2 px-3 rounded bg-light" onclick="runCode()">Run</button>
                    <button class="mx-2 px-3 rounded bg-light" onclick="importAndLoadBlocks()">Import</button>
                    <button class="mx-2 px-3 rounded bg-light" onclick="exportBlocks()">Export</button>
                </div>
                <div class="container-fluid mb-5" id="run-area-container">
                    <textarea class="p-3" id="run-area"></textarea>
                </div>
            </div>
        </div>

        <div class="col-sm-12 col-md-7">
            <div id="BlocklyDiv-container">
                <div id="blocklyDiv"></div>
            </div>
            <div class="mt-4" id="result-area-container">
                <p class="m-4 h4 fw-bold" id="result">Result:</p>
            </div>
            <!-- pop-up score -->
            <div  id="pop-up-score" class="container align-items-center justify-content-center shadow-lg p-5">
                <button id="close-pop-up" onclick="closeScore()"><i class="fa fa-times-circle" aria-hidden="true"></i></button>
                <div id="user-score" class="my-5 text-center"></div>
            </div>
            <!-- back button -->
            <button id="back-homepage" onclick="backHome()"><i class="fa fa-undo" aria-hidden="true"></i> Back to Homepage</button>
            <!-- time counter -->
            <button id="time-counter-button" onclick="startCountdown(1800)" hidden></button>
            <div id="time-counter"></div>
        </div>
        <!-- Make textarea cannot be editted -->
        <button id="UneditQuestion" onclick="makeQuestionAreaUneditable()" hidden></button>
        <button id="UneditRun" onclick="makeRunAreaUneditable()" hidden></button>

        <!-- get answer from db -->
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[0].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[1].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[2].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[3].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[4].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[5].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[6].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[7].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[8].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[9].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[10].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[11].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[12].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[13].ex_answer%>
        </textarea>
        <textarea class="answer-from-db" hidden>
            <%=mediumQuestionsData[14].ex_answer%>
        </textarea>
    </div>

    <xml id="toolbox" style="display: none">
        <category name="Input" colour="#5b80a5">
            <block type="math_number">
                <field name="NUM" text="Nhập số tự nhiên"></field>
            </block>

        </category>

        <category name="String" colour="#5b80a5">
            <block type="string_input"></block>
            <block type="string_concatenate"></block>
            <block type="string_length"></block>
            <block type="string_slice"></block>

        </category>

        <!-- Category "Khối Phép tính" (Blocks for Arithmetic Operations) -->
        <category name="Operations" colour="#76b75d">
            <!-- Khối Cộng (Addition) -->
            <block type="math_addition">
                <value name="A">
                </value>
                <value name="B">
                </value>
            </block>
            <!-- Khối Trừ (Subtraction) -->
            <block type="math_subtraction">
                <value name="A">
                </value>
                <value name="B">
                </value>
            </block>
            <!-- Khối Nhân (Multiplication) -->
            <block type="math_multiplication">
                <value name="A">
                </value>
                <value name="B">
                </value>
            </block>
            <!-- Khối Chia (Division) -->
            <block type="math_division">
                <value name="A">
                </value>
                <value name="B">
                </value>
            </block>
            <!-- Khối Mũ (Exponentiation) -->
            <block type="math_exponentiation">
                <value name="A">
                </value>
                <value name="B">
                </value>
            </block>
            <!-- Khối Căn bậc hai (Square Root) -->
            <block type="math_square_root">
                <value name="NUM">
                </value>
            </block>
            <!-- Khối Chia lấy dư (Modulo) -->
            <block type="math_modulo">
                <value name="DIVIDEND">
                </value>
                <value name="DIVISOR">
                </value>
            </block>
            <!-- Khối căn tùy chỉnh -->
            <block type="math_custom_root"></block>
            <!-- Khối giao giừa (Factorial) -->
            <block type="math_factorial"></block>

        </category>


        <!-- Variable blocks -->
        <category name="Variable" custom="VARIABLE" colour="#db7c38">

        </category>

        <!-- Logic blocks -->
        <category name="Logic" colour="#d84a5b">
            <block type="controls_if"></block>
            <block type="logic_compare"></block>
            <block type="controls_ifelse"></block>
        </category>

        <!-- Loop blocks -->
        <category name="Loops" colour="#4b9f95">
            <block type="controls_repeat_ext"></block>
            <block type="controls_whileUntil"></block>
            <!-- Thêm các khối vòng lặp khác tại đây -->
        </category>

        <category name="Functions" colour="#BACC00">
            <block type="custom_function"></block>
            <block type="custom_function_with_params"></block>
            <block type="call_function"></block>
        </category>

    </xml>



    <script>
        var workspace = Blockly.inject('blocklyDiv', { toolbox: document.getElementById('toolbox') });
        // String input
        Blockly.Blocks['string_input'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Input string: %1",
                    "args0": [
                        {
                            "type": "field_input",
                            "name": "TEXT",
                            "text": ""
                        }
                    ],
                    "output": "String",
                    "colour": 160,
                    "tooltip": "This block allows the user to input a string."
                });
            }
        };

        Blockly.Blocks['string_concatenate'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Concatenate strings %1 and %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "STRING1",
                            "check": "String"
                        },
                        {
                            "type": "input_value",
                            "name": "STRING2",
                            "check": "String"
                        }
                    ],
                    "output": "String",
                    "colour": 160,
                    "tooltip": "Concatenate two strings together"
                });
            }
        };

        Blockly.Blocks['string_length'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Length of string %1",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "STRING",
                            "check": "String"
                        }
                    ],
                    "output": "Number",
                    "colour": 160,
                    "tooltip": "Return the length of the string."
                });
            }
        };

        Blockly.Blocks['string_slice'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Slice string %1 from position %2 to %3",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "STRING",
                            "check": "String"
                        },
                        {
                            "type": "input_value",
                            "name": "START",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "END",
                            "check": "Number"
                        }
                    ],
                    "output": "String",
                    "colour": 160,
                    "tooltip": "Slice a portion of the string from the starting position to the ending position."
                });
            }
        };



        Blockly.Blocks['math_addition'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Sum of %1 and %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "A",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "B",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#FF6600",
                    "tooltip": "Addition of two numbers",
                    "helpUrl": ""
                });
            }
        };

        Blockly.Blocks['math_subtraction'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Difference between %1 and %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "A",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "B",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#0066CC",
                    "tooltip": "Subtraction of two numbers",
                    "helpUrl": ""
                });
            }
        };

        Blockly.Blocks['math_multiplication'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Product of %1 and %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "A",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "B",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#FF33CC",
                    "tooltip": "Multiplication of two numbers",
                    "helpUrl": ""
                });
            }
        };

        Blockly.Blocks['math_division'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Quotient of %1 divided by %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "A",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "B",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#00CC66",
                    "tooltip": "Division of two numbers",
                    "helpUrl": ""
                });
            }
        };

        Blockly.Blocks['math_exponentiation'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Exponentiation of %1 to the power of %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "A",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "B",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#FF9900",
                    "tooltip": "Exponentiation",
                    "helpUrl": ""
                });
            }
        };



        Blockly.Blocks['math_square_root'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Square root of %1",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "NUM",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#FFCC00",
                    "tooltip": "Square root",
                    "helpUrl": ""
                });
            }

        };

        Blockly.Blocks['math_modulo'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Modulus of %1 divided by %2",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "DIVIDEND",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "DIVISOR",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#99CC33",
                    "tooltip": "Modulus or remainder",
                    "helpUrl": ""
                });
            }
        };

        Blockly.Blocks['math_custom_root'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Square root of %2 to the power of %1",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "INDEX",
                            "check": "Number"
                        },
                        {
                            "type": "input_value",
                            "name": "NUM",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#BACC00",
                    "tooltip": "Square root of B to the power of A",
                    "helpUrl": ""
                });
            }
        };
        Blockly.Blocks['math_factorial'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Factorial of %1",
                    "args0": [
                        {
                            "type": "input_value",
                            "name": "NUM",
                            "check": "Number"
                        }
                    ],
                    "output": "Number",
                    "inputsInline": true,
                    "colour": "#FFCC00",
                    "tooltip": "Factorial calculation",
                    "helpUrl": ""
                });
            }
        };

        // Function block
        Blockly.Blocks['custom_function'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Function %1",
                    "args0": [
                        {
                            "type": "field_input",
                            "name": "NAME",
                            "text": "function"
                        }
                    ],
                    "message1": "%1",
                    "args1": [
                        {
                            "type": "input_statement",
                            "name": "STATEMENT"
                        }
                    ],
                    "colour": 230,
                    "tooltip": "",
                    "helpUrl": ""
                });
            }
        };
        Blockly.Blocks['custom_function_with_params'] = {

            init: function () {
                this.jsonInit(
                    {
                        "message0": "Function %1 %2",
                        "args0": [
                            {
                                "type": "field_input",
                                "name": "NAME",
                                "text": "function"
                            },
                            {
                                "type": "input_dummy"
                            }
                        ],
                        "message1": "%1",
                        "args1": [
                            {
                                "type": "input_statement",
                                "name": "INPUT"
                            }
                        ],
                        "message2": "%1",
                        "args2": [
                            {
                                "type": "input_value",
                                "name": "OUTPUT"
                            }
                        ],
                        "colour": 230,
                        "tooltip": "",
                        "helpUrl": ""
                    });
            }

        };
        Blockly.Blocks['call_function'] = {
            init: function () {
                this.jsonInit({
                    "message0": "Call function %1",
                    "args0": [
                        {
                            "type": "field_input",
                            "name": "NAME",
                            "text": ""
                        }
                    ],
                    "colour": 230,
                    "tooltip": "",
                    "helpUrl": ""
                });
            }
        };

        // String processing
        // String input processing
        Blockly.JavaScript['string_input'] = function (block) {
            var text_input = block.getFieldValue('TEXT');
            var code = "'" + text_input + "'";
            return [code, Blockly.JavaScript.ORDER_ATOMIC];
        };


        // String concatenating processing
        Blockly.JavaScript['string_concatenate'] = function (block) {
            var value_string1 = Blockly.JavaScript.valueToCode(block, 'STRING1', Blockly.JavaScript.ORDER_ATOMIC);
            var value_string2 = Blockly.JavaScript.valueToCode(block, 'STRING2', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_string1 + ' + ' + value_string2;
            return [code, Blockly.JavaScript.ORDER_ADDITION];
        };

        // String length processing
        Blockly.JavaScript['string_length'] = function (block) {
            var value_string = Blockly.JavaScript.valueToCode(block, 'STRING', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_string + '.length';
            return [code, Blockly.JavaScript.ORDER_MEMBER];
        };

        // String slicing processing
        Blockly.JavaScript['string_slice'] = function (block) {
            var value_string = Blockly.JavaScript.valueToCode(block, 'STRING', Blockly.JavaScript.ORDER_ATOMIC);
            var value_start = Blockly.JavaScript.valueToCode(block, 'START', Blockly.JavaScript.ORDER_ATOMIC);
            var value_end = Blockly.JavaScript.valueToCode(block, 'END', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_string + '.slice(' + value_start + ', ' + value_end + ')';
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        };

        // Sum processing
        Blockly.JavaScript['math_addition'] = function (block) {
            var value_a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
            var value_b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_a + ' + ' + value_b;
            return [code, Blockly.JavaScript.ORDER_ADDITION];
        };

        // Subtraction processing
        Blockly.JavaScript['math_subtraction'] = function (block) {
            var value_a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
            var value_b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_a + ' - ' + value_b;
            return [code, Blockly.JavaScript.ORDER_SUBTRACTION];
        };

        // Multiplication processing
        Blockly.JavaScript['math_multiplication'] = function (block) {
            var value_a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
            var value_b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_a + ' * ' + value_b;
            return [code, Blockly.JavaScript.ORDER_MULTIPLICATION];
        };

        // Devision processing
        Blockly.JavaScript['math_division'] = function (block) {
            var value_a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
            var value_b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_a + ' / ' + value_b;
            return [code, Blockly.JavaScript.ORDER_DIVISION];
        };
        // Exponentiation processing
        Blockly.JavaScript['math_exponentiation'] = function (block) {
            var value_a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
            var value_b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
            var code = 'Math.pow(' + value_a + ', ' + value_b + ')';
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        };

        // Square root processing
        Blockly.JavaScript['math_square_root'] = function (block) {
            var value_num = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
            var code = 'Math.sqrt(' + value_num + ')';
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        };

        // Modulo processing
        Blockly.JavaScript['math_modulo'] = function (block) {
            var value_dividend = Blockly.JavaScript.valueToCode(block, 'DIVIDEND', Blockly.JavaScript.ORDER_ATOMIC);
            var value_divisor = Blockly.JavaScript.valueToCode(block, 'DIVISOR', Blockly.JavaScript.ORDER_ATOMIC);
            var code = value_dividend + ' % ' + value_divisor;
            return [code, Blockly.JavaScript.ORDER_MODULUS];
        };

        // Custom root processing
        Blockly.JavaScript['math_custom_root'] = function (block) {
            var value_index = Blockly.JavaScript.valueToCode(block, 'INDEX', Blockly.JavaScript.ORDER_ATOMIC);
            var value_num = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
            var code = 'Math.pow(' + value_num + ', 1 / ' + value_index + ')';
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        };

        // Factorial processing
        Blockly.JavaScript['math_factorial'] = function (block) {
            var value_num = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);

            var functionName = Blockly.JavaScript.provideFunction_(
                'math_factorial',
                ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',
                    '  if (n === 0 || n === 1) {',
                    '    return 1;',
                    '  } else {',
                '    return n * ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(n - 1);',
                    '  }',
                    '}']);

            var code = functionName + '(' + value_num + ')';
            return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];
        };

        //Function without return value processing
        Blockly.JavaScript['custom_function'] = function (block) {
            var name = block.getFieldValue('NAME');
            var branch = Blockly.JavaScript.statementToCode(block, 'STATEMENT');

            var code = 'function ' + name + '() {\n' + branch + '}\n';

            return code;
        };

        Blockly.JavaScript['call_function'] = function (block) {
            var name = block.getFieldValue('NAME');
            var code = name + '();\n';
            return code;
        };
        //Function with return value processing
        Blockly.JavaScript['custom_function_with_params'] = function (block) {

            var name = block.getFieldValue('NAME');
            var branch = Blockly.JavaScript.statementToCode(block, 'INPUT');
            var returnValue = Blockly.JavaScript.valueToCode(block, 'OUTPUT', Blockly.JavaScript.ORDER_NONE) || '';

            var args = [];
            var code = 'function ' + name + '(' + args.join(', ') + ') {\n' + branch + '\nreturn ' + returnValue + ';\n}';

            return code;
        };


        Blockly.JavaScript.updateWorkspaceBlocks = function (workspace, code) {
            // Iterate through the generated blocks
            workspace.getAllBlocks().forEach(function (block) {
                if (block.type !== 'math_number') {
                    // Update block values based on newCode
                    var blockGenerator = Blockly.JavaScript[block.type];
                    if (blockGenerator) {
                        blockGenerator(block);
                    }
                }
            });
        }

        function runCode() {
            // Execute the generated Blockly code
            var code = Blockly.JavaScript.workspaceToCode(workspace);
            var result = eval(code);
            document.getElementById('result').textContent = 'Result: ' + result;
        }

        function exportBlocks() {
            var xml = Blockly.Xml.workspaceToDom(workspace);
            var xmlText = Blockly.Xml.domToPrettyText(xml);

            var filename = prompt("Nhập tên tệp:", "blocks");
            if (filename !== null && filename.trim() !== "") {
                if (!filename.endsWith(".xml")) {
                    filename += ".xml"; // Đảm bảo rằng tên tệp có đuôi .xml
                }
                download(filename, xmlText);
            }
        }

        function download(filename, text) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }

        // function importBlocks() {
        //     var importInput = document.getElementById("importInput");
        //     var file = importInput.files[0];

        //     if (file) {
        //         var reader = new FileReader();
        //         reader.onload = function (event) {
        //             var xmlText = event.target.result;
        //             var parser = new DOMParser();
        //             var xml = parser.parseFromString(xmlText, "text/xml");

        //             if (xml.getElementsByTagName('xml').length > 0) {
        //                 xml = xml.getElementsByTagName('xml')[0];
        //                 Blockly.Xml.clearWorkspaceAndLoadFromXml(xml, workspace);
        //             } else {
        //                 alert("Tệp dữ liệu không hợp lệ.");
        //             }
        //         };
        //         reader.readAsText(file);
        //     }
        // }

        function importAndLoadBlocks() {
            var importInput = document.createElement('input');
            importInput.type = 'file';
            importInput.accept = '.xml'; // Accept file .xml only
            importInput.addEventListener('change', function (event) {
                var file = event.target.files[0];
                var reader = new FileReader();
                reader.onload = function (event) {
                    var xmlText = event.target.result;
                    var parser = new DOMParser();
                    var xml = parser.parseFromString(xmlText, 'text/xml');

                    if (xml.getElementsByTagName('xml').length > 0) {
                        xml = xml.getElementsByTagName('xml')[0];
                        Blockly.Xml.clearWorkspaceAndLoadFromXml(xml, workspace);
                    } else {
                        alert('Invalid data file.');
                    }
                };
                reader.readAsText(file);
            });
            importInput.click();
        }


        function updateCode() {
            // Generate Blockly code and display it in the textarea
            var code = Blockly.JavaScript.workspaceToCode(workspace);
            document.getElementById('run-area').value = code;
            document.getElementById('run-button').click();
        }

        // Add an event listener to workspace to update the code whenever blocks change
        workspace.addChangeListener(updateCode);

        // Only-read question area
        function makeQuestionAreaUneditable() {
            const textarea = document.getElementById("question-area");
            textarea.disabled = true;
        }
        document.getElementById("UneditQuestion").click();
        // Only-read run-code area
        function makeRunAreaUneditable() {
            const textarea = document.getElementById("run-area");
            textarea.disabled = true;
        }
        document.getElementById("UneditRun").click();
        document.getElementById('time-counter-button').click();

        document.getElementById('submit-answer').addEventListener('click', async () => {
            const level = document.referrer.split("/").pop(); // get level
            let result = 0;
            const token = localStorage.getItem('token')
            for (let i = 0; i < 15; i++) {
                //document.addEventListener('DOMContentLoaded', function() {
                if (document.getElementsByClassName('answer-from-db')[i].value.trim() == document.getElementsByClassName('answer')[i].value.trim().toLowerCase()) {
                    result += 1;
                    document.getElementsByClassName('answer')[i].style.backgroundColor = "green";
                } else {
                    document.getElementsByClassName('answer')[i].style.backgroundColor = "#d73c4e";
                }

            };

            try {
                const response = await fetch('/saveresult', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ level, result, token }),
                });
                const data = await response.json();
                if (data.success) {
                    console.log(data.message)
                } else {
                    console.error('Lỗi:', response.statusText);
                }
            } catch (error) {
                console.error('Lỗi:', error);
            }
            result = result + " Points";
            document.getElementById("user-score").innerHTML = result;
            document.getElementById("submit-answer").disabled = true;
            document.getElementById("submit-answer").style.backgroundColor = "green";
            document.getElementById("pop-up-score").style.display = "block";
        });

        function closeScore() {
            document.getElementById("pop-up-score").style.display = "none";
        }

        function backHome() {
            location.replace("/KidsCodeAcademy");
        }

        function startCountdown(seconds) {
            let counter = seconds;
                
            const interval = setInterval(() => {
                console.log(counter);
                counter--;
                document.getElementById("time-counter").innerHTML = counter;
                
                if (counter == 0 ) {
                clearInterval(interval);
                document.getElementById('submit-answer').click();
                }
            }, 1000);
        }
    </script>
</body>

</html>